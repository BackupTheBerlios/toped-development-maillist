From krustev.svilen at googlemail.com  Thu May 24 00:40:31 2007
From: krustev.svilen at googlemail.com (Svilen Krustev)
Date: Wed, 23 May 2007 23:40:31 +0100
Subject: [Toped-development] TELL list operations
In-Reply-To: <4620E5AC.1070609@tiscali.co.uk>
References: <4620E5AC.1070609@tiscali.co.uk>
Message-ID: <4654C2DF.30408@tiscali.co.uk>

The usual second though... now when the list operations are almost 
implemented - some preliminary documentation

  - Almost all operations are implemented using tell operators. The only 
exception is the function length()
  - Almost all operations are based on indexing or index-like operators, 
thus making tell lists look and fill like dynamic arrays. Maybe we have 
to change the name here.
  - No pointers
  - The interpreter throws a runtime error if an invalid index is 
encountered

-- Indexing - works as expected. Indexed variable can be also lvalue.
    listvar[i] = listvar[j]

-- Add/insert a component.
    listvar[<index>:+] = <var>;
       will insert a component after indext-th component and will 
initialize it to <var>. If <index> is omitted - will simply add to the 
end of the list.
    listvar[+:<index>] = <var>;
       will insert a component before indext-th component and will 
initialize it to <var>. If <index> is omitted - will simply insert in 
the beginning of the list.

-- List union
  The operators above will take also a list as an rvalue. This produces 
not only a simple list union, but also inserting a list anywhere into 
another list
    listvar[<index>:+] = <var_list>;
    listvar[+:<index>] = <var_list>;

-- Remove a component.
    <var> = listvar[<index>:-] ;
    <var> = listvar[-:<index>];
       The operators above are equivalent. They will remove the 
indext-th component from the listvar and will return its value in the 
operand stack.
       If <index> is omitted - the operators are not equivalent anymore
    <var> = listvar[:-];
         will remove the last component from the list
    <var> = listvar[-:];
         will remove the first component from the list

-- List slices (under development)
    <var_list> = listvar[<index>:-<num>];
       will remove <num> sequential components from listvar starting 
from <index>. The slice will be pushed in the operand stack. <num> must 
be > 0.
    <var_list> = listvar[<num>-:<index>];
       will remove <num> components from listvar ending with <index>. 
The slice will be pushed in the operand stack. <num> must be > 0.
Obviously remove operation is a special case of the slice operation, 
when <num> == 1. The difference between them is that the former returns 
<var> while the latter returns <var_list>

-- List length. Implemented with a function.
    <int> = length(<listvar>);

-- Traversing - foreach operator as described below

(Sorry for the strange notation...  The tell definitions below might 
help a little
     <tell_type> list listvar, var_list;
     <tell_type> var;
)

The idea about implementing list operations using functions proved to be 
wrong. A lot of reasons - just one of them: tell maintains strict type 
checking, and in the same time - user defined types. There is no clear 
way to define a function that will return unknown type, and all user 
defined types are unknown.

Some samples & examples can be found in the repository - 
trunk/tll/checklists.tll
Anything missing?

Svilen

>
> As discussed earlier, TELL lacks any list operations. In the same time 
> lists and structures are already integral part of the script types. It 
> seems we need 2 groups of additions. (not discussing list definition 
> and initialization because it is already implemented)
>
> - list modification - add/remove components to/from the list.
> - access to the member components and traversing
>
> When it comes to the implementation of those additions, two general 
> questions need to be answered
> - what happens in case of an attempt to access nonexistent list 
> component. This actually brings the bigger question - what about 
> pointers?
> - whether the basic list operations should be implemented as operators 
> or as a build-in TELL functions.
>
> Here is a quick list of the possible implementation using build-in 
> TELL functions. No pointers.
>
> <type>        = first(<type_list>)                   - first in the list
> <type_list>   = first(<type_list>,integer)           - first N in the 
> list, slice
> <type>        = last(<type_list>)                    - last in the list
> <type_list>   = last(<type_list>, integer)           - last N in the 
> list, slice
>  Question is still open what shall happen if an empty list is accessed 
> from the functions above
>
> <type_list>   = pushfront(<type_list>, <type>)       - add one 
> component in the front of the list
> <type_list>   = pushback(<type_list>, <type>)        - add one 
> component in the back of the list
> <type>        = popfront(<type_list>)                - remove one 
> component from the beginning of the list
> <type_list>   = popfront(<type_list>, integer)       - remove N 
> components from the beginning of the list
> <type>        = popback(<type_list>)                 - remove one 
> component from the end of the list
> <type_list>   = popback(<type_list>, integer)        - remove N 
> components from the end of the list
>
> <unsigned>    = length(<type_list>)
>
> In addition for traversing of lists - operator
> foreach(<type> ; <type_list>) {}
> (already implemented)
>
> What about indexing? It seems more appropriate for arrays, but it can 
> be nice to have this for TELL lists?
>
> Svilen
>
>



